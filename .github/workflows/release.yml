name: Build and Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: Build ${{ matrix.binary_target }}
    runs-on: ${{ matrix.os }}
    env:
      BINARY_NAME: rust_github_action
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            binary_target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            binary_target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            binary_target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            binary_target: armv7-unknown-linux-gnueabihf
          - os: windows-latest
            binary_target: x86_64-pc-windows-msvc
          - os: macos-latest
            binary_target: x86_64-apple-darwin
          - os: macos-latest
            binary_target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install musl tools
        if: matrix.binary_target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Install ARM cross-compilation tools
        if:
          matrix.binary_target == 'aarch64-unknown-linux-gnu' ||
          matrix.binary_target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          if [[ "${{ matrix.binary_target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
          elif [[ "${{ matrix.binary_target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross
          fi

      - name: Setup Cargo Config
        if:
          matrix.binary_target == 'aarch64-unknown-linux-gnu' ||
          matrix.binary_target == 'armv7-unknown-linux-gnueabihf'
        run: |
          mkdir -p .cargo
          if [[ "${{ matrix.binary_target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo '[target.aarch64-unknown-linux-gnu]' > .cargo/config.toml
            echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml
            echo 'rustflags = ["-C", "link-arg=-lgcc"]' >> .cargo/config.toml
          elif [[ "${{ matrix.binary_target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            echo '[target.armv7-unknown-linux-gnueabihf]' > .cargo/config.toml
            echo 'linker = "arm-linux-gnueabihf-gcc"' >> .cargo/config.toml
            echo 'rustflags = ["-C", "link-arg=-lgcc"]' >> .cargo/config.toml
          fi

      - name: Install target
        run: rustup target add ${{ matrix.binary_target }}

      - name: Build binary
        run: |
          if [[ "${{ matrix.binary_target }}" == "aarch64-unknown-linux-gnu" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
            export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
            export PKG_CONFIG_ALLOW_CROSS=1
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUSTFLAGS="-C link-arg=-lgcc"
          elif [[ "${{ matrix.binary_target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
            export CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc
            export CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++
            export PKG_CONFIG_ALLOW_CROSS=1
            export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_RUSTFLAGS="-C link-arg=-lgcc"
          fi
          cargo build --release --target ${{ matrix.binary_target }}

      - name: Set archive name
        id: archive
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "ARCHIVE_NAME=${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.binary_target }}.zip" >> $GITHUB_ENV
          else
            echo "ARCHIVE_NAME=${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.binary_target }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.binary_target }}/release
          tar -czf ../../../${{ env.ARCHIVE_NAME }} ${{ env.BINARY_NAME }}
          cd -

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target/${{ matrix.binary_target }}/release
          $BINARY_NAME = "${{ env.BINARY_NAME }}.exe"
          Compress-Archive -Path $BINARY_NAME -DestinationPath ../../../${{ env.ARCHIVE_NAME }}
          cd -

      - name: Upload Release Asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          tag: ${{ github.ref }}
          overwrite: true
